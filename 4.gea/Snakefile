"""
Snakefile for workflow assessing gradient forest artifacts due to sampling design
Summary:
    Take the initial vcf file for all brown-capped rosy-finch and then
    shuffle individuals among pops and run gradient forest to see what
    patterns emerge from the output of gradient forest that are totally
    due to finite sampling along the environmental gradients
"""

NSPLITS = 5
POPS = ["DECA","ENMO","HOBA","LAAG","LMIN","MOMA","MTEV","PIPE","SNRA"]
SEED = 5


# define some input functions
def mafs_from_num(wildcards):
    return expand("results/extract_maf/{num}/{popu}.maf.txt",
        num = wildcards.num,
        popu = POPS)

"""
Step 0: create files that contain the individuals that will go into the
different "splits"
"""
rule create_splits:
    input:
        popmap = "../data/bcrf.popmap.norelate",
    params:
        n_splits = NSPLITS,
        seed = SEED
    log:
        "results/logs/create_splits.log"
    conda:
        "../envs/r.yaml"
    envmodules:
        "R/4.0.3"
    output:
        expand("results/perm_splits/{num}/{popu}", num = range(1, NSPLITS + 1), popu = POPS)
    script:
       "../script/split-birds.R"


"""
Step 1: Split vcf
Randomly split up individuals into pops
Use the same sample size for sites as the original design
"""
rule split_vcf:
    input:
        sfile = "results/perm_splits/{num}/{popu}",
        big_vcf = "../data/bcrf.qual30.maf10.meanDP6_12.10missing.snps.LDpruned0.2.norelate.vcf.gz"
    output:
        vcf = "results/split_vcfs/{num}/{popu}.vcf.gz"
    log:
        "results/logs/split_vcf/{num}--{popu}.log"
    conda:
        "../envs/bcftools.yaml"
    shell:
        "bcftools view -S {input.sfile} -Oz {input.big_vcf} > {output.vcf} 2> {log}"

"""
Step 2: Get allele frequencies
For each pop, get AF from genotype likelihoods with ANGSD
ANGSD needs to be up-to-date (0.935)
"""

rule angsd_maf:
    input:
        vcf = "results/split_vcfs/{num}/{popu}.vcf.gz"
    output:
        mafsgz = "results/angsd_maf/{num}/{popu}.mafs.gz"
    log:
        "results/logs/angsd_maf/{num}--{popu}.log"
    conda:
        "../envs/angsd.yaml"
    shell:
        "angsd -vcf-pl {input.vcf} -domaf 1 -out results/angsd_maf/{wildcards.num}/{wildcards.popu} 2> {log}"

"""
Step 3: Extract allele frequencies
"""

rule extract_maf:
    input:
        mafsgz = "results/angsd_maf/{num}/{popu}.mafs.gz"
    output:
        maf = "results/extract_maf/{num}/{popu}.maf.txt"
    log:
        "results/logs/extract_maf/{num}--{popu}.log"
    shell:
        "zcat {input.mafsgz} | awk 'NR > 1 {{print $5}}' | tr '\n' ' ' | sed -e '$a\\' > {output.maf}"


"""
Step 4: Catenate AFs
cat all the AF files together into one for response matrix of gradient forest
"""
rule cat_maf:
    input:
        maf = mafs_from_num
    output:
        full_maf = "results/response_mat/{num}.full_maf.txt"
    shell:
        "cat {input.maf} > {output.full_maf}"

"""
Step 5: Run Gradient forest
run GF on the AF response matrix
Explore the parameter space for number of trees (ntree) and
number of predictor variables (mtry)
"""


rule run_gradientforest:
    input:
        response = "results/response_mat/{num}.full_maf.txt",
        predictor = "../data/bcrf.env.predictor",
        snps = "../data/snp.names.txt"
    params:
        seed = SEED
    log:
        "results/logs/run_gradientforest/{num}.log"
    conda:
        "../envs/r.yaml"
    envmodules:
        "R/4.0.3"
    output:
        "results/gradientforest/bcrfForest.{num}.rds"
    script:
        "../script/run-gradientforest.R"
